

<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
	<!-- required meta tags -->
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta charset="utf-8" />

<!-- <script src="widgEditor/scripts/widgEditor.js"></script>
<link rel="stylesheet" type="text/css" href="widgEditor/css/widgEditor.css"> -->

<!-- Bootstrap CSS -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">

<!-- jQuery first, then Popper.js, then Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>

<!-- ion icons -->
<script src="https://unpkg.com/ionicons@4.5.10-0/dist/ionicons.js"></script>



<!-- github css -->
<!-- https://gist.github.com/tuzz/3331384 -->
<link rel="stylesheet" type="text/css" href="css/github.css">

<!-- modest css -->
<!-- https://github.com/markdowncss/modest/blob/master/css/modest.css -->
<!-- <link rel="stylesheet" type="text/css" href="css/modest.css"> -->

<!-- custom css sheet -->
<link rel="stylesheet" type="text/css" href="css/style.css">

<!-- prism code highlighter -->
<link rel="stylesheet" type="text/css" href="css/prism.css">

<link href="https://fonts.googleapis.com/css?family=Special+Elite&display=swap" rel="stylesheet" />

	<title>PHP Notes</title>
</head>

<body>
	<section id="top-navbar">
	<div class="container-fluid">
		<nav class="navbar navbar-toggleable-sm navbar-expand-sm navbar-dark">
			<!-- <div class="navbar-brand"></div> -->
			<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
				<ion-icon name="menu" class="custom-text-white"></ion-icon>
			</button>


			<!-- Links -->
			<div class="collapse navbar-collapse" id="navbarNav">
				<ul class="nav navbar-nav">
					<li class="nav-item nav-link-hover"><a class="nav-link" href="entries.php" id="entries-nav">Posts</a></li>
					<li class="nav-item nav-link-hover"><a class="nav-link" href="new-entry.php" id="new-entry-nav">New post</a></li>
					<li class="nav-item nav-link-hover"><a class="nav-link" href="edit-entry.php" id="edit-entry-nav">Edit post</a></li>
				</ul>
			</div>
		</nav>
	</div>
</section>
	<div class="container">

    <!-- entry title and date -->
    <div class="entry-title">
      <h1>PHP Notes</h1>
      <h5>December 9th, 2019</h5>
    </div>

    <br><br>
    <div id="content">
     <h2 id="contents">Table of Contents</h2>

<ol>
<li><a href="#background">Background</a></li>
<li><a href="#connecting-to-database">Connecting to Database</a></li>
<li><a href="#prepared-statements">Prepared SQL Statements</a></li>
</ol>

<section id="background">
<h2><a href="#contents">Background</a></h2>
<p>This is going to be a working collection of notes I have on PHP. They will include code snippets that I frequently include in my projects, and other things of that nature.</p>
</section>

<section id="connecting-to-database">
<h2><a href="#contents">Connecting to Database</a></h2>
<p>These 2 code snippets are how I usually connect to my database in php. Most of the time, I create a file called <code>functions.php</code> where I place the <code>dbConnect()</code> function. Then, on all my other files I use an <code>include('functions.php')</code> statement at the top.</p>

<h4>dbConnect()</h4>
<pre><code class="language-php">function dbConnect() {
  include('db-info.php');

  try {
    // connect to database
    $pdo = new PDO("mysql:host=$host;dbname=$dbName",$user,$password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    return $pdo;

  } catch(PDOexception $e) {
      return 0;
  }
}</code></pre>

<h4>db-info.php</h4>
<pre><code class="language-php">
  $user = "username";
  $password = "password";
  $dbName = "dbname";
  $host = "localhost";</code></pre>

</section>

<section id="prepared-statements">
<h2><a href="#contents">Prepared SQL Statements</a></h2>

<p>Prepared statements are a way of executing sql statements in a safe and efficient manner. They help protect against sql injection attacks, by sanitizing and filtering the data that is to be used in the statements. Using prepared statements over inserting raw query parameters into a SQL query is widely considered to be the proper approach when interacting with databases.</p>

<h3>Prepared statement readings</h3>
<ul>
<li><a href="https://www.php.net/manual/en/pdo.prepared-statements.php" target="_blank">PHP Manual</a></li>
<li><a href="https://phptherightway.com/#pdo_extension" target="_blank">PHP: The Right Way</a></li>
</ul>

<h3>How I write prepared statements</h3>
<p>Below are the steps I take when writing a prepared statement. This is not the only way to write correct prepared statements, and there are ways that I can improve them. However, these can help get anyone started. The steps I take are as followed:
<ol>
<li>Initialize the pdo object</li>
<li>Prepare the SQL statement</li>
<li>Filter the variables</li>
<li>Bind the parameters</li>
<li>Execute the sql statement and close the connections</li>
</ol>
</p>

<h4>Initialize the pdo object</h4>
<pre><code class="language-php">$pdo = dbConnect();</code></pre>

<h4>Prepare the SQL statement</h4>
<pre><code class="language-php">$sql = $pdo->prepare('SELECT id, dept, number FROM Classes where term=:term ORDER BY dept, number');
$sql = $pdo->prepare('UPDATE ListItems SET completed=:completed WHERE id=:id');
$sql = $pdo->prepare('INSERT INTO Lists (title) VALUES (:name)');
$sql = $pdo->prepare('DELETE FROM ListItems WHERE id=:id');</code></pre>
<p>Notice the semicolin before the variable name!</p>

<h4>Filter the variables</h4>
You need to choose one of these next 2 options. The first option is for when you have a standard variable. The second option is when you want to use a global variable like $_POST or $_GET.

<h5>Standard Variable</h5>
<pre><code class="language-php">$id = filter_var($id, FILTER_SANITIZE_NUMBER_INT);</code></pre>

<h5>Global Variable</h5>
<pre><code class="language-php">$listID = filter_input(INPUT_GET, 'listID', FILTER_SANITIZE_NUMBER_INT);			// get
$name = filter_input(INPUT_POST, 'update-todo-list-title', FILTER_SANITIZE_STRING);	// post</code></pre>

<p>For both functions, the last parameter is dependent on the type of variable (int, string, double, etc...) being passed in. The table below shows the corresponding relationships. <a href="https://www.php.net/manual/en/filter.filters.sanitize.php" target="_blank">Link</a> to the php site.</p>
<table class="table table-sm table-striped">
<tr><th>string</th> <td>FILTER_SANITIZE_STRING</td></tr>
<tr><th>int</th> <td> FILTER_SANITIZE_NUMBER_INT </td></tr>
<tr><th>double/float</th> <td>FILTER_SANITIZE_NUMBER_FLOAT</td></tr>
<tr><th>URL</th> <td>FILTER_SANITIZE_URL</td></tr>
<tr><th>email</th> <td>FILTER_SANITIZE_EMAIL</td></tr>
<tr><th>magic quotes</th><td> FILTER_SANITIZE_MAGIC_QUOTES</td></tr>
</table>

<h4>Bind the parameter</h4>
<pre><code class="language-php">$sql->bindParam(':id', $id, PDO::PARAM_INT);</code></pre>

<p>For the third parameter in <code class="language=php">bindParam()</code>, depending on the variable type there are different options to choose from. Below is a table showing the different variable types and their respective predefined constant. Additional constants can be found <a href="https://www.php.net/manual/en/pdo.constants.php" target="_blank">here</a>.</p>

<table class="table table-sm table-striped">
<tr><th>string</th><td>PDO::PARAM_STR</td></tr>
<tr><th>int</th><td>PDO::PARAM_INT</td></tr>
<tr><th>double*</th><td>PDO::PARAM_STR</td></tr>
<tr><th>email, date, other</th><td>PDO::PARAM_STR</td></tr>
<table>

<p>*There is no predefined constants for a type double so it is <a href="https://stackoverflow.com/a/2718737" target="_blank">recommended</a> to use the string constant.</p>

<h4>Execute SQL statement and close connections</h4>
<p>The final step is to execute the SQL statement and close the pdo object connections. It is good practice to explicitly close the pdo connections by setting the objects to null. If you don't do this, php will automatically close the connections when the script ends.</p>

<pre><code class="language-php">// execute sql statement
$sql->execute();

// close the pdo connections
$pdo = null;
$sql = null;</code></pre>

<h3>Example of a prepared statement</h3>
<p>Below is an example of a php function that executes a simple prepared update statement to a MySQL database table using the steps I have listed above.</p>

<pre><code class="language-php">// sets a todo list item as complete
function updateTodoListItemComplete($id, $completed) {
   $pdo = dbConnect();
   $sql = $pdo->prepare('UPDATE ListItems SET completed=:completed WHERE id=:id');

   // filter variables
   $id = filter_var($id, FILTER_SANITIZE_NUMBER_INT);
   $completed = filter_var($completed, FILTER_SANITIZE_STRING);

   // bind the parameters
   $sql->bindParam(':id', $id, PDO::PARAM_INT);
   $sql->bindParam(':completed', $completed, PDO::PARAM_STR);

   // execute sql statement
   $sql->execute();

   // close the pdo connections
   $pdo = null;
   $sql = null;
}</code></pre>
</section>   </div>


   <br><br>

 </div>




 <script src="js/prism.js"></script>


</body>

</html>
